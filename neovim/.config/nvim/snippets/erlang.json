{
    "Common Test": {
        "prefix": "ctest",
        "body": [
            "-module(${1:${TM_FILENAME_BASE}}).",
            "",
            "-include_lib(\"common_test/include/ct.hrl\").",
            "-include_lib(\"eunit/include/eunit.hrl\").",
            "",
            "-compile(nowarn_export_all).",
            "-compile(export_all).",
            "",
            "all() ->",
            "  [",
            "  ].",
            "",
            "init_per_testcase(_Name, Config) ->",
            "  Config.",
            "",
            "end_per_testcase(_Name, Config) ->",
            "  Config.",
            "",
            "${0}",
            "",
            "%%%===================================================================",
            "%%% Test cases",
            "%%%===================================================================",
            "",
            "%%%===================================================================",
            "%%% Internal functions",
            "%%%==================================================================="
        ]
    },
    "gen_server": {
        "prefix": "gen_server",
        "body": [
            "-module(${1:${TM_FILENAME_BASE}}).",
            "",
            "-behaviour(gen_server).",
            "",
            "%% API",
            "-export([start_link/0]).",
            "",
            "%% gen_server callbacks",
            "-export([init/1, handle_call/3, handle_cast/2, handle_info/2, terminate/2, code_change/3]).",
            "",
            "-define(SERVER, ?MODULE).",
            "",
            "-record(state, {}).",
            "%%%===================================================================",
            "%%% API",
            "%%%===================================================================",
            "",
            "start_link() ->",
            "  gen_server:start_link({local, ?SERVER}, ?MODULE, [], []).",
            "",
            "%%%===================================================================",
            "%%% gen_server callbacks",
            "%%%===================================================================",
            "",
            "init([]) ->",
            "  {ok, #state{}}.",
            "",
            "handle_call(_Request, _From, State) ->",
            "  {reply, ok, State}.",
            "",
            "handle_cast(_Msg, State) ->",
            "  {noreply, State}.",
            "",
            "handle_info(_Info, State) ->",
            "  {noreply, State}.",
            "",
            "terminate(_Reason, _State) ->",
            "  ok.",
            "",
            "code_change(_OldVsn, State, _Extra) ->",
            "  {ok, State}.",
            "",
            "%%%===================================================================",
            "%%% Internal functions",
            "%%%==================================================================="
        ]
    },
    "gen_statem": {
        "prefix": "gen_statem",
        "body": [
            "-module(${1:${TM_FILENAME_BASE}}).",
            "",
            "-behaviour(gen_statem).",
            "",
            "%% API",
            "-export([start_link/0]).",
            "",
            "%% gen_statem callbacks",
            "-export([init/1,",
            "     callback_mode/0,",
            "     handle_event/4,",
            "     code_change/4,",
            "     terminate/3]).",
            "",
            "-record(data, {}).",
            "",
            "%%%===================================================================",
            "%%% API",
            "%%%===================================================================",
            "",
            "-spec start_link() -> gen_statem:start_ret().",
            "start_link() ->",
            "  gen_statem:start_link({local, ?MODULE}, ?MODULE, [], []).",
            "",
            "%%%===================================================================",
            "%%% gen_statem callbacks",
            "%%%===================================================================",
            "",
            "callback_mode() ->",
            "  [handle_event_function].",
            "",
            "init(_Arguments) ->",
            "  {ok, start, #data{}}.",
            "",
            "handle_event(cast, _Action, _State, _Data) ->",
            "  keep_state_and_data;",
            "handle_event({call, From}, _Action, State, Data) ->",
            "  {next_state, State, Data, [{reply, From, Data}]};",
            "handle_event(info, _Msg, _State, _Data) ->",
            "  keep_state_and_data.",
            "",
            "terminate(_Reason, _State, _Data) ->",
            "  ok.",
            "",
            "code_change(_Vsn, State, Data, _Extra) ->",
            "  {ok, State, Data}.",
            "",
            "%%%===================================================================",
            "%%% Internal functions",
            "%%%==================================================================="
        ]
    },
    "trace": {
        "prefix": "trace",
        "body": "io:format(user, \"~nat=~s:~p:~p\", [?MODULE_STRING, ?FUNCTION_NAME, ?LINE]),"
    },
    "proper": {
        "prefix": "proper",
        "body": [
            "-module(${1:${TM_FILENAME_BASE}}).",
            "",
            "-include_lib(\"proper/include/proper.hrl\").",
            "-include_lib(\"eunit/include/eunit.hrl\").",
            "",
            "-compile(nowarn_export_all).",
            "-compile(export_all).",
            "",
            "%%%===================================================================",
            "%%% Generators",
            "%%%===================================================================",
            "",
            "${0}",
            "",
            "%%%===================================================================",
            "%%% Internal functions",
            "%%%==================================================================="
        ]
    },
    "Functional Module": {
        "prefix": "functional_module",
        "body": [
            "-module(${1:${TM_FILENAME_BASE}}).",
            "",
            "%% API",
            "-export([]).",
            "",
            "%%%===================================================================",
            "%%% API",
            "%%%===================================================================",
            "",
            "${0}",
            "",
            "%%%===================================================================",
            "%%% Internal functions",
            "%%%==================================================================="
        ]
    },
    "error": {
        "prefix": "error",
        "body": "{error, ${1}}"
    },
    "ok": {
        "prefix": "ok",
        "body": "{ok, ${1}}"
    },
    "Test Case": {
        "prefix": "test_case",
        "body": [
            "${1}() ->",
            "  [{doc, \"${2}\"}].",
            "${1}(_Config) ->",
            "  ${0:ok}."
        ]
    },
    "Supervisor": {
        "prefix": "supervisor",
        "body": [
            "-module(${1:${TM_FILENAME_BASE/_sup$//}}_sup).",
            "",
            "-behaviour(supervisor).",
            "",
            "%% API",
            "-export([start_link/0]).",
            "",
            "%% Supervisor callbacks",
            "-export([init/1]).",
            "",
            "-define(SERVER, ?MODULE).",
            "",
            "%%====================================================================",
            "%% API functions",
            "%%====================================================================",
            "",
            "-spec start_link() ->",
            "    {ok, pid()} | ignore | {error, term()}.",
            "start_link() ->",
            "    supervisor:start_link({local, ?SERVER}, ?MODULE, []).",
            "",
            "%%====================================================================",
            "%% Supervisor callbacks",
            "%%====================================================================",
            "",
            "init([]) ->",
            "    {ok, {#{strategy => ${2:one_for_one},",
            "            intensity => 5,",
            "            period => 10},",
            "          [${3}",
            "          ]}}."
        ]
    },
    "Application": {
        "prefix": "application",
        "body": [
            "-module(${1:${TM_FILENAME_BASE/_app$//}_app}).",
            "",
            "-behaviour(application).",
            "",
            "%% Application callbacks",
            "-export([start/2,",
            "         stop/1]).",
            "",
            "-type start_type() :: (",
            "        normal |",
            "        {takeover, Node :: node()} |",
            "        {failover, Node :: node()}",
            "       ).",
            "",
            "%%====================================================================",
            "%% API",
            "%%====================================================================",
            "",
            "-spec start(StartType :: start_type(), StartArgs :: term()) ->",
            "    {ok, Pid :: pid()} | {ok, Pid :: pid(), State :: term()} | {error, Reason :: term()}.",
            "start(_StartType, _StartArgs) ->",
            "    ${1:${TM_FILENAME_BASE/_app$//}}_sup:start_link().",
            "",
            "-spec stop(State :: term()) -> ok.",
            "stop(_State) ->",
            "    ok.",
            "",
            "%%====================================================================",
            "%% Internal functions",
            "%%===================================================================="
        ]
    },
    "Common Test Suite": {
        "prefix": "ctsuite",
        "body": [
            "init_per_suite(Config) ->",
            "    Config.",
            "",
            "end_per_suite(Config) ->",
            "    Config."
        ]
    },
    "Common Test Case": {
        "prefix": "ctcase",
        "body": [
            "init_per_testcase(_Case, Config) ->",
            "  Config.",
            "",
            "end_per_testcase(_Case, Config) ->",
            "  Config."
        ]
    },
    "Common Test Group": {
        "prefix": "ctgroup",
        "body": [
            "groups() ->",
            "  [",
            "  ].",
            "",
            "init_per_group(_Group, Config) ->",
            "    Config.",
            "",
            "end_per_group(_Group, Config) ->",
            "    Config."
        ]
    },
    "Common Test Group Specification": {
        "prefix": "ctgroupspec",
        "body": "{$1, [parallel], [$2]}"
    },
    "Supervisor Child Specification": {
        "prefix": "child_spec",
        "body": [
            "#{id => ${1},",
            "  start => {$1, start_link, []},",
            "  restart => ${2:permanent},",
            "  shutdown => 5000,",
            "  type => ${3:worker},",
            "  modules => [$1]}${0}"
        ]
    },
    "Logger Include": {
        "prefix": "logger_include",
        "body": "-include_lib(\"kernel/include/logger.hrl\")."
    },
    "EUnit Include": {
        "prefix": "logger_include",
        "body": "-include_lib(\"eunit/include/eunit.hrl\")."
    },
    "MS Transform Include": {
        "prefix": "ms_transform",
        "body": "-include_lib(\"stdlib/include/ms_transform.hrl\")."
    },
    "LOG_INFO": {
        "prefix": "log_info",
        "body": "?LOG_INFO(#{what => ${1}}),"
    },
    "LOG_DEBUG": {
        "prefix": "log_debug",
        "body": "?LOG_DEBUG(#{what => ${1}}),"
    },
    "LOG_WARNING": {
        "prefix": "log_warning",
        "body": "?LOG_WARNING(#{what => ${1}}),"
    },
    "LOG_ERROR": {
        "prefix": "log_error",
        "body": "?LOG_ERROR(#{what => ${1}}),"
    },
    "meck Expectation": {
        "prefix": "meck_expect",
        "body": "meck:expect($1, $2, [{[$3], $4}]),"
    },
    "meck wait": {
        "prefix": "meck_wait",
        "body": "meck:wait($1, $2, $3, $4)"
    },
    "Cowboy Router": {
        "prefix": "cowboy_router",
        "body": [
            "-module(${1:${TM_FILENAME_BASE}}).",
            "",
            "-behaviour(gen_server).",
            "",
            "%% API",
            "-export([start_link/0]).",
            "",
            "%% gen_server callbacks",
            "-export([init/1,",
            "         handle_call/3,",
            "         handle_cast/2,",
            "         handle_info/2,",
            "         terminate/2]).",
            "",
            "-define(DEFAULT_PORT, 8000).",
            "",
            "-record(state, {}).",
            "",
            "%%%===================================================================",
            "%%% API",
            "%%%===================================================================",
            "",
            "-spec start_link() -> {ok, pid()} | ignore | {error, term()}.",
            "start_link() ->",
            "    gen_server:start_link({local, ?MODULE}, ?MODULE, [], []).",
            "",
            "%%%===================================================================",
            "%%% gen_server callbacks",
            "%%%===================================================================",
            "",
            "init([]) ->",
            "    process_flag(trap_exit, true),",
            "    Port = application:get_env(${1:${TM_FILENAME_BASE}}, api_port, ?DEFAULT_PORT),",
            "    Routes = [{\"/route/\", ${2}, []},",
            "              {\"/route/:id\", [{id, nonempty}], snmp_simulator_devices_handler, []}],",
            "    Dispatch = cowboy_router:compile([{'_', Routes}]),",
            "    {ok, _} = cowboy:start_clear(?MODULE,",
            "                                 [{port, Port}],",
            "                                 #{env => #{dispatch => Dispatch}}",
            "                                ),",
            "    {ok, #state{}}.",
            "",
            "handle_call(_Request, _From, State) ->",
            "    {reply, ok, State}.",
            "",
            "handle_cast(_Msg, State) ->",
            "    {noreply, State}.",
            "",
            "handle_info(_Info, State) ->",
            "    {noreply, State}.",
            "",
            "terminate(_Reason, _State) ->",
            "    cowboy:stop_listener(?MODULE).",
            "",
            "%%%===================================================================",
            "%%% Internal functions",
            "%%%==================================================================="
        ]
    },
    "Cowboy REST": {
        "prefix": "cowboy_rest",
        "body": [
            "-module(${1:${TM_FILENAME_BASE}}).",
            "",
            "-include_lib(\"kernel/include/logger.hrl\").",
            "",
            "-behaviour(cowboy_rest).",
            "",
            "%% API",
            "-export([to_json/2,",
            "         from_json/2]).",
            "",
            "%% cowboy_rest callbacks",
            "-export([init/2,",
            "         delete_resource/2,",
            "         allowed_methods/2,",
            "         content_types_provided/2,",
            "         content_types_accepted/2]).",
            "",
            "-type state() :: term().",
            "-type cowboy_return(Parameter) :: {Parameter, cowboy_req:req(), state()}.",
            "",
            "%%====================================================================",
            "%% Public API",
            "%%====================================================================",
            "",
            "-spec to_json(cowboy_req:req(), state()) -> cowboy_return(Response :: binary()).",
            "to_json(Request, State) ->",
            "    {<<>>, Request, State}.",
            "",
            "-spec from_json(cowboy_req:req(), state()) -> cowboy_return(IsBadRequest :: boolean()).",
            "from_json(Request, State) ->",
            "    {false, Request, State}.",
            "",
            "%%====================================================================",
            "%% cowboy_rest callbacks",
            "%%====================================================================",
            "",
            "init(Request, State) ->",
            "    {cowboy_rest, Request, State}.",
            "",
            "allowed_methods(Request, State) ->",
            "    {[<<\"GET\">>, <<\"POST\">>, <<\"PUT\">>, <<\"DELETE\">>], Request, State}.",
            "",
            "content_types_provided(Request, State) ->",
            "    {[{{<<\"application\">>, <<\"json\">>, '*'}, to_json}], Request, State}.",
            "",
            "content_types_accepted(Request, State) ->",
            "    {[{{<<\"application\">>, <<\"json\">>, '*'}, from_json}], Request, State}.",
            "",
            "delete_resource(Request, State) ->",
            "    {true, Request, State}.",
            "",
            "%%====================================================================",
            "%% Internal functions",
            "%%===================================================================="
        ]
    },
    "Cowboy Handler": {
        "prefix": "cowboy_handler",
        "body": [
            "-module(${1:${TM_FILENAME_BASE}}).",
            "",
            "-include_lib(\"kernel/include/logger.hrl\").",
            "",
            "-behaviour(cowboy_handler).",
            "",
            "%% cowboy_handler callbacks",
            "-export([init/2]).",
            "",
            "-type state() :: term().",
            "-type cowboy_return(Parameter) :: {Parameter, cowboy_req:req(), state()}.",
            "",
            "%%====================================================================",
            "%% cowboy_handler callbacks",
            "%%====================================================================",
            "",
            "-spec init(Request :: cowboy_req:req(), State :: state()) -> cowboy_return(ok).",
            "init(Request, State) ->",
            "    {ok, Request, State}.",
            "",
            "%%====================================================================",
            "%% Internal functions",
            "%%===================================================================="
        ]
    },
    "gen_event": {
        "prefix": "gen_event",
        "body": [
            "-module(${1:${TM_FILENAME_BASE}}).",
            "",
            "-behaviour(gen_event).",
            "",
            "%% API",
            "-export([start_link/0,",
            "  add_handler/2]).",
            "",
            "%% gen_event callbacks",
            "-export([init/1,",
            "  handle_event/2,",
            "  handle_call/2,",
            "  handle_info/2,",
            "  terminate/2,",
            "  code_change/3]).",
            "",
            "-record(state, {}).",
            "",
            "%%%===================================================================",
            "%%% gen_event callbacks",
            "%%%===================================================================",
            "",
            "start_link() ->",
            "  gen_event:start_link({local, ?MODULE}).",
            "",
            "add_handler(Handler, Args) ->",
            "  gen_event:add_handler(?MODULE, Handler, Args).",
            "",
            "%%%===================================================================",
            "%%% gen_event callbacks",
            "%%%===================================================================",
            "",
            "init([]) ->",
            "  {ok, #state{}}.",
            "",
            "handle_event(_Event, State) ->",
            "  {ok, State}.",
            "",
            "handle_call(_Request, State) ->",
            "  Reply = ok,",
            "  {ok, Reply, State}.",
            "",
            "handle_info(_Info, State) ->",
            "  {ok, State}.",
            "",
            "terminate(_Reason, _State) ->",
            "  ok.",
            "",
            "code_change(_OldVsn, State, _Extra) ->",
            "  {ok, State}.",
            "",
            "%%%===================================================================",
            "%%% Internal functions",
            "%%%==================================================================="
        ]
    },
    "case..of": {
        "prefix": "case",
        "body": [
          "case ${1} of",
          "  ${2:pattern} ->",
          "    ${3};",
          "end"
        ]
    }
}
