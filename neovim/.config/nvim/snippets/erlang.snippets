snippet ctest
  -module(${1}).

  -include_lib("common_test/include/ct.hrl").
  -include_lib("eunit/include/eunit.hrl").

  -compile(nowarn_export_all).
  -compile(export_all).

  all() ->
    [
    ].

  init_per_testcase(_Name, Config) ->
    Config.

  end_per_testcase(_Name, Config) ->
    Config.

  ${0}

  %%%===================================================================
  %%% Test cases
  %%%===================================================================

  %%%===================================================================
  %%% Internal functions
  %%%===================================================================

snippet gen_server
  -module(${1}).

  -behaviour(gen_server).

  %% API
  -export([start_link/0]).

  %% gen_server callbacks
  -export([init/1, handle_call/3, handle_cast/2, handle_info/2, terminate/2, code_change/3]).

  -define(SERVER, ?MODULE).

  -record(state, {}).

  %%%===================================================================
  %%% API
  %%%===================================================================

  start_link() ->
    gen_server:start_link({local, ?SERVER}, ?MODULE, [], []).

  %%%===================================================================
  %%% gen_server callbacks
  %%%===================================================================

  init([]) ->
    {ok, #state{}}.

  handle_call(_Request, _From, State) ->
    Reply = ok,
    {reply, Reply, State}.

  handle_cast(_Msg, State) ->
    {noreply, State}.

  handle_info(_Info, State) ->
    {noreply, State}.

  terminate(_Reason, _State) ->
    ok.

  code_change(_OldVsn, State, _Extra) ->
    {ok, State}.

  %%%===================================================================
  %%% Internal functions
  %%%===================================================================

snippet gen_statem "Finite State Machine"
  -module(${1}).

  -behaviour(gen_statem).

  %% API
  -export([start_link/0]).

  %% gen_statem callbacks
  -export([init/1,
       callback_mode/0,
       handle_event/4,
       code_change/4,
       terminate/3]).

  -record(data, {}).

  %%%===================================================================
  %%% API
  %%%===================================================================

  -spec start_link() -> gen_statem:start_ret().
  start_link() ->
    gen_statem:start_link({local, ?MODULE}, ?MODULE, [], []).

  %%%===================================================================
  %%% gen_statem callbacks
  %%%===================================================================

  callback_mode() ->
    [handle_event_function].

  init(_Arguments) ->
    {ok, start, #data{}}.

  handle_event(cast, _Action, _State, _Data) ->
    keep_state_and_data;
  handle_event({call, From}, _Action, State, Data) ->
    {next_state, State, Data, [{reply, From, Data}]};
  handle_event(info, _Msg, _State, _Data) ->
    keep_state_and_data.

  terminate(_Reason, _State, _Data) ->
    ok.

  code_change(_Vsn, State, Data, _Extra) ->
    {ok, State, Data}.

  %%%===================================================================
  %%% Internal functions
  %%%===================================================================

snippet trace
  io:format(user, "~nat=~s:~p:~p", [?MODULE_STRING, ?FUNCTION_NAME, ?LINE]),

snippet proper
  -module(${1}).

  -include_lib("proper/include/proper.hrl").
  -include_lib("eunit/include/eunit.hrl").

  -compile(nowarn_export_all).
  -compile(export_all).

  %%%===================================================================
  %%% Generators
  %%%===================================================================

  ${0}

  %%%===================================================================
  %%% Internal functions
  %%%===================================================================

snippet functional_module
  -module(${1}).

  %% API
  -export([]).

  %%%===================================================================
  %%% API
  %%%===================================================================

  ${0}

  %%%===================================================================
  %%% Internal functions
  %%%===================================================================

snippet error
  {error, ${1}}

snippet ok
  {ok, ${1}}

snippet test_case
  ${1}() ->
    [{doc, "${2}"}].
  ${1}(_Config) ->
    ${0:ok}.

snippet supervisor
  -module(${1}).

  -behaviour(supervisor).

  %% API
  -export([start_link/0]).

  %% Supervisor callbacks
  -export([init/1]).

  -define(SERVER, ?MODULE).

  %%====================================================================
  %% API functions
  %%====================================================================

  -spec start_link() ->
      {ok, pid()} | ignore | {error, term()}.
  start_link() ->
      supervisor:start_link({local, ?SERVER}, ?MODULE, []).

  %%====================================================================
  %% Supervisor callbacks
  %%====================================================================

  init([]) ->
      {ok, {#{strategy => ${1:one_for_one},
              intensity => 5,
              period => 10},
            [${0}
            ]}}.

snippet application
  -module($1_app).

  -behaviour(application).

  %% Application callbacks
  -export([start/2,
           stop/1]).

  -type start_type() :: (
          normal |
          {takeover, Node :: node()} |
          {failover, Node :: node()}
         ).

  %%====================================================================
  %% API
  %%====================================================================

  -spec start(StartType :: start_type(), StartArgs :: term()) ->
      {ok, Pid :: pid()} | {ok, Pid :: pid(), State :: term()} | {error, Reason :: term()}.
  start(_StartType, _StartArgs) ->
      $1_sup:start_link().

  -spec stop(State :: term()) -> ok.
  stop(_State) ->
      ok.

  %%====================================================================
  %% Internal functions
  %%====================================================================

snippet ctsuite
  init_per_suite(Config) ->
      Config.

  end_per_suite(Config) ->
      Config.

snippet ctcase
  init_per_testcase(_Case, Config) ->
    Config.

  end_per_testcase(_Case, Config) ->
    Config.

snippet ctgroup
  groups() ->
    [
    ].

  init_per_group(_Group, Config) ->
      Config.

  end_per_group(_Group, Config) ->
      Config.

snippet ctgroupspec
  {$1, [parallel], [$2]}

snippet child_spec
  #{id => ${1},
    start => {$1, start_link, []},
    restart => ${2:permanent},
    shutdown => 5000,
    type => ${3:worker},
    modules => [$1]}${0}

snippet logger_include
  -include_lib("kernel/include/logger.hrl").

snippet eunit_include
  -include_lib("eunit/include/eunit.hrl").

snippet ms_transform
  -include_lib("stdlib/include/ms_transform.hrl").

snippet log_info
  ?LOG_INFO(#{what => ${1}}),

snippet log_debug
  ?LOG_DEBUG(#{what => ${1}}),

snippet log_warning
  ?LOG_WARNING(#{what => ${1}}),

snippet log_error
  ?LOG_ERROR(#{what => ${1}}),

snippet meck_expect
  meck:expect($1, $2, [{[$3], $4}]),

snippet meck_wait
  meck:wait($1, $2, $3, $4)

snippet cowboy_router
  -module(${1}).

  -behaviour(gen_server).

  %% API
  -export([start_link/0]).

  %% gen_server callbacks
  -export([init/1,
           handle_call/3,
           handle_cast/2,
           handle_info/2,
           terminate/2]).

  -define(DEFAULT_PORT, 8000).

  -record(state, {}).

  %%%===================================================================
  %%% API
  %%%===================================================================

  -spec start_link() -> {ok, pid()} | ignore | {error, term()}.
  start_link() ->
      gen_server:start_link({local, ?MODULE}, ?MODULE, [], []).

  %%%===================================================================
  %%% gen_server callbacks
  %%%===================================================================

  init([]) ->
      process_flag(trap_exit, true),
      Port = application:get_env(${1}, api_port, ?DEFAULT_PORT),
      Routes = [{"/route/", ${2}, []},
                {"/route/:id", [{id, nonempty}], snmp_simulator_devices_handler, []}],
      Dispatch = cowboy_router:compile([{'_', Routes}]),
      {ok, _} = cowboy:start_clear(?MODULE,
                                   [{port, Port}],
                                   #{env => #{dispatch => Dispatch}}
                                  ),
      {ok, #state{}}.

  handle_call(_Request, _From, State) ->
      {reply, ok, State}.

  handle_cast(_Msg, State) ->
      {noreply, State}.

  handle_info(_Info, State) ->
      {noreply, State}.

  terminate(_Reason, _State) ->
      cowboy:stop_listener(?MODULE).

  %%%===================================================================
  %%% Internal functions
  %%%===================================================================

snippet cowboy_rest
  -module(${1}).

  -include_lib("kernel/include/logger.hrl").

  -behaviour(cowboy_rest).

  %% API
  -export([to_json/2,
           from_json/2]).

  %% cowboy_rest callbacks
  -export([init/2,
           delete_resource/2,
           allowed_methods/2,
           content_types_provided/2,
           content_types_accepted/2]).

  -type state() :: term().
  -type cowboy_return(Parameter) :: {Parameter, cowboy_req:req(), state()}.

  %%====================================================================
  %% Public API
  %%====================================================================

  -spec to_json(cowboy_req:req(), state()) -> cowboy_return(Response :: binary()).
  to_json(Request, State) ->
      {<<>>, Request, State}.

  -spec from_json(cowboy_req:req(), state()) -> cowboy_return(IsBadRequest :: boolean()).
  from_json(Request, State) ->
      {false, Request, State}.

  %%====================================================================
  %% cowboy_rest callbacks
  %%====================================================================

  init(Request, State) ->
      {cowboy_rest, Request, State}.

  allowed_methods(Request, State) ->
      {[<<"GET">>, <<"POST">>, <<"PUT">>, <<"DELETE">>], Request, State}.

  content_types_provided(Request, State) ->
      {[{{<<"application">>, <<"json">>, '*'}, to_json}], Request, State}.

  content_types_accepted(Request, State) ->
      {[{{<<"application">>, <<"json">>, '*'}, from_json}], Request, State}.

  delete_resource(Request, State) ->
      {true, Request, State}.

  %%====================================================================
  %% Internal functions
  %%====================================================================

snippet cowboy_handler
  -module(${1}).

  -include_lib("kernel/include/logger.hrl").

  -behaviour(cowboy_handler).

  %% cowboy_handler callbacks
  -export([init/2]).

  -type state() :: term().
  -type cowboy_return(Parameter) :: {Parameter, cowboy_req:req(), state()}.

  %%====================================================================
  %% cowboy_handler callbacks
  %%====================================================================

  -spec init(Request :: cowboy_req:req(), State :: state()) -> cowboy_return(ok).
  init(Request, State) ->
      {ok, Request, State}.

  %%====================================================================
  %% Internal functions
  %%====================================================================

snippet gen_event
  -module(${1}).

  -behaviour(gen_event).

  %% API
  -export([start_link/0,
    add_handler/2]).

  %% gen_event callbacks
  -export([init/1,
    handle_event/2,
    handle_call/2,
    handle_info/2,
    terminate/2,
    code_change/3]).

  -record(state, {}).

  %%%===================================================================
  %%% gen_event callbacks
  %%%===================================================================

  %%--------------------------------------------------------------------
  %% @doc
  %% Creates an event manager
  %%
  %% @spec start_link() -> {ok, Pid} | {error, Error}
  %% @end
  %%--------------------------------------------------------------------
  start_link() ->
    gen_event:start_link({local, ?MODULE}).

  %%--------------------------------------------------------------------
  %% @doc
  %% Adds an event handler
  %%
  %% @spec add_handler(Handler, Args) -> ok | {'EXIT', Reason} | term()
  %% @end
  %%--------------------------------------------------------------------
  add_handler(Handler, Args) ->
    gen_event:add_handler(?MODULE, Handler, Args).

  %%%===================================================================
  %%% gen_event callbacks
  %%%===================================================================

  %%--------------------------------------------------------------------
  %% @private
  %% @doc
  %% Whenever a new event handler is added to an event manager,
  %% this function is called to initialize the event handler.
  %%
  %% @spec init(Args) -> {ok, State}
  %% @end
  %%--------------------------------------------------------------------
  init([]) ->
    {ok, #state{}}.

  %%--------------------------------------------------------------------
  %% @private
  %% @doc
  %% Whenever an event manager receives an event sent using
  %% gen_event:notify/2 or gen_event:sync_notify/2, this function is
  %% called for each installed event handler to handle the event.
  %%
  %% @spec handle_event(Event, State) ->
  %%                          {ok, State} |
  %%                          {swap_handler, Args1, State1, Mod2, Args2} |
  %%                          remove_handler
  %% @end
  %%--------------------------------------------------------------------
  handle_event(_Event, State) ->
    {ok, State}.

  %%--------------------------------------------------------------------
  %% @private
  %% @doc
  %% Whenever an event manager receives a request sent using
  %% gen_event:call/3,4, this function is called for the specified
  %% event handler to handle the request.
  %%
  %% @spec handle_call(Request, State) ->
  %%                   {ok, Reply, State} |
  %%                   {swap_handler, Reply, Args1, State1, Mod2, Args2} |
  %%                   {remove_handler, Reply}
  %% @end
  %%--------------------------------------------------------------------
  handle_call(_Request, State) ->
    Reply = ok,
    {ok, Reply, State}.

  %%--------------------------------------------------------------------
  %% @private
  %% @doc
  %% This function is called for each installed event handler when
  %% an event manager receives any other message than an event or a
  %% synchronous request (or a system message).
  %%
  %% @spec handle_info(Info, State) ->
  %%                         {ok, State} |
  %%                         {swap_handler, Args1, State1, Mod2, Args2} |
  %%                         remove_handler
  %% @end
  %%--------------------------------------------------------------------
  handle_info(_Info, State) ->
    {ok, State}.

  %%--------------------------------------------------------------------
  %% @private
  %% @doc
  %% Whenever an event handler is deleted from an event manager, this
  %% function is called. It should be the opposite of Module:init/1 and
  %% do any necessary cleaning up.
  %%
  %% @spec terminate(Reason, State) -> void()
  %% @end
  %%--------------------------------------------------------------------
  terminate(_Reason, _State) ->
    ok.

  %%--------------------------------------------------------------------
  %% @private
  %% @doc
  %% Convert process state when code is changed
  %%
  %% @spec code_change(OldVsn, State, Extra) -> {ok, NewState}
  %% @end
  %%--------------------------------------------------------------------
  code_change(_OldVsn, State, _Extra) ->
    {ok, State}.

  %%%===================================================================
  %%% Internal functions
  %%%===================================================================
