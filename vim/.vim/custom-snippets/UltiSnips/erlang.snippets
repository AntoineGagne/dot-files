snippet ctest "Common Test" b
-module(${1:`!p snip.rv = snip.basename or "module"`}).

-include_lib("common_test/include/ct.hrl").
-include_lib("eunit/include/eunit.hrl").

-compile(nowarn_export_all).
-compile(export_all).

all() ->
	[
	].

init_per_testcase(_Name, Config) ->
	Config.

end_per_testcase(_Name, Config) ->
	Config.

${0}

%%%===================================================================
%%% Internal functions
%%%===================================================================
endsnippet

snippet gen_statem "Finite State Machine" b
-module(${1:`!p snip.rv = snip.basename or "module"`}).

-behaviour(gen_statem).

%% API
-export([start_link/0]).

%% gen_statem callbacks
-export([init/1,
		 callback_mode/0,
		 handle_event/4,
		 code_change/4,
		 terminate/3]).

-record(data, {}).

%%%===================================================================
%%% API
%%%===================================================================

start_link() ->
	gen_statem:start_link(?MODULE, []).

%%%===================================================================
%%% gen_statem callbacks
%%%===================================================================

callback_mode() ->
	[handle_event_function, state_enter].

init(_Arguments) ->
	{ok, start, #data{}}.

handle_event(enter, _OldState, _State, _Data) ->
	{next_state, _State, _Data};
handle_event(cast, _Action, _State, _Data) ->
	keep_state_and_data;
handle_event({call, From}, _Action, State, Data) ->
	{next_state, State, Data, [{reply, From, Data}]};
handle_event(info, _Msg, _State, _Data) ->
	keep_state_and_data.

terminate(_Reason, _State, _Data) ->
	ok.

code_change(_Vsn, State, Data, _Extra) ->
	{ok, State, Data}.

%%%===================================================================
%%% Internal functions
%%%===================================================================
endsnippet

snippet trace "Statement that prints even during tests" b
io:format(user, "~nat=~s:~p:~p", [?MODULE_STRING, ?FUNCTION_NAME, ?LINE]),
endsnippet

snippet proper "Property Based Testing" b
-module(${1:`!p snip.rv = snip.basename or "module"`}).

-include_lib("proper/include/proper.hrl").
-include_lib("eunit/include/eunit.hrl").

-compile(nowarn_export_all).
-compile(export_all).

%%%===================================================================
%%% Generators
%%%===================================================================

${0}
endsnippet

snippet functional_module "Purely functional module" b
-module(${1:`!p snip.rv = snip.basename or "module"`}).

%% API
-export([]).

%%%===================================================================
%%% API
%%%===================================================================

${0}

%%%===================================================================
%%% Internal functions
%%%===================================================================
endsnippet

snippet error "Error tuple" b
{error, ${1}}
endsnippet

snippet ok "Success tuple" b
{ok, ${1}}
endsnippet

snippet test_case "Test case" b
${1:${VISUAL}}() ->
	[{doc, "${2}"}].
$1(_Config) ->
	${0}.
endsnippet
