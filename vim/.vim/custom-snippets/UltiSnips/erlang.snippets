snippet ctest "Common Test" b
-module(${1:`!p snip.rv = snip.basename or "module"`}).

-include_lib("common_test/include/ct.hrl").
-include_lib("eunit/include/eunit.hrl").

-compile(nowarn_export_all).
-compile(export_all).

all() ->
	[
	].

init_per_testcase(_Name, Config) ->
	Config.

end_per_testcase(_Name, Config) ->
	Config.

${0}

%%%===================================================================
%%% Internal functions
%%%===================================================================
endsnippet

snippet gen_statem "Finite State Machine" b
-module(${1:`!p snip.rv = snip.basename or "module"`}).

-behaviour(gen_statem).

%% API
-export([start_link/0]).

%% gen_statem callbacks
-export([init/1,
		 callback_mode/0,
		 handle_event/4,
		 code_change/4,
		 terminate/3]).

-record(data, {}).

%%%===================================================================
%%% API
%%%===================================================================

-spec start_link() -> gen_statem:start_ret().
start_link() ->
	gen_statem:start_link({local, ?MODULE}, ?MODULE, [], []).

%%%===================================================================
%%% gen_statem callbacks
%%%===================================================================

callback_mode() ->
	[handle_event_function].

init(_Arguments) ->
	{ok, start, #data{}}.

handle_event(cast, _Action, _State, _Data) ->
	keep_state_and_data;
handle_event({call, From}, _Action, State, Data) ->
	{next_state, State, Data, [{reply, From, Data}]};
handle_event(info, _Msg, _State, _Data) ->
	keep_state_and_data.

terminate(_Reason, _State, _Data) ->
	ok.

code_change(_Vsn, State, Data, _Extra) ->
	{ok, State, Data}.

%%%===================================================================
%%% Internal functions
%%%===================================================================
endsnippet

snippet trace "Statement that prints even during tests" b
io:format(user, "~nat=~s:~p:~p", [?MODULE_STRING, ?FUNCTION_NAME, ?LINE]),
endsnippet

snippet proper "Property Based Testing" b
-module(${1:`!p snip.rv = snip.basename or "module"`}).

-include_lib("proper/include/proper.hrl").
-include_lib("eunit/include/eunit.hrl").

-compile(nowarn_export_all).
-compile(export_all).

%%%===================================================================
%%% Generators
%%%===================================================================

${0}

%%%===================================================================
%%% Internal functions
%%%===================================================================
endsnippet

snippet functional_module "Purely functional module" b
-module(${1:`!p snip.rv = snip.basename or "module"`}).

%% API
-export([]).

%%%===================================================================
%%% API
%%%===================================================================

${0}

%%%===================================================================
%%% Internal functions
%%%===================================================================
endsnippet

snippet error "Error tuple"
{error, ${1}}
endsnippet

snippet ok "Success tuple"
{ok, ${1}}
endsnippet

snippet test_case "Test case" b
${1:${VISUAL}}() ->
	[{doc, "${2}"}].
$1(_Config) ->
	${0:ok}.
endsnippet

snippet supervisor "Supervisor" b
-module(${1:`!p snip.rv = snip.basename or "module"`}).

-behaviour(supervisor).

%% API
-export([start_link/0]).

%% Supervisor callbacks
-export([init/1]).

-define(SERVER, ?MODULE).

%%====================================================================
%% API functions
%%====================================================================

-spec start_link() ->
    {ok, pid()} | ignore | {error, term()}.
start_link() ->
    supervisor:start_link({local, ?SERVER}, ?MODULE, []).

%%====================================================================
%% Supervisor callbacks
%%====================================================================

init([]) ->
    {ok, {#{strategy => ${1:one_for_one},
            intensity => 5,
            period => 10},
          [${0}
          ]}}.
endsnippet

snippet application "Application" b
-module($1_app).

-behaviour(application).

%% Application callbacks
-export([start/2,
         stop/1]).

-type start_type() :: (
        normal |
        {takeover, Node :: node()} |
        {failover, Node :: node()}
       ).

%%====================================================================
%% API
%%====================================================================

-spec start(StartType :: start_type(), StartArgs :: term()) ->
    {ok, Pid :: pid()} | {ok, Pid :: pid(), State :: term()} | {error, Reason :: term()}.
start(_StartType, _StartArgs) ->
    $1_sup:start_link().

-spec stop(State :: term()) -> ok.
stop(_State) ->
    ok.

%%====================================================================
%% Internal functions
%%====================================================================
endsnippet

snippet ctsuite "Common Test Suite"
init_per_suite(Config) ->
    Config.

end_per_suite(Config) ->
    Config.
endsnippet

snippet ctgroup "Common Test Group"
groups() ->
	[
	].

init_per_group(Config) ->
    Config.

end_per_group(Config) ->
    Config.
endsnippet

snippet ctgroupspec "Common Test Group Specification"
{$1, [parallel], [$2]}
endsnippet

snippet child_spec "Supervisor Child Specification" i
#{id => ${1},
  start => {$1, start_link, []},
  restart => ${2:permanent},
  shutdown => 5000,
  type => ${3:worker},
  modules => [$1]}${0}
endsnippet

snippet logger_include "OTP 21 Logger Include"
-include_lib("kernel/include/logger.hrl").
endsnippet

snippet ms_transform "ETS MS Transforms"
-include_lib("stdlib/include/ms_transform.hrl").
endsnippet

snippet log_info "LOG_INFO"
?LOG_INFO(#{what => ${1}}),
endsnippet

snippet log_debug "LOG_DEBUG"
?LOG_DEBUG(#{what => ${1}}),
endsnippet

snippet log_warning "LOG_WARNING"
?LOG_WARNING(#{what => ${1}}),
endsnippet

snippet log_error "LOG_ERROR"
?LOG_ERROR(#{what => ${1}}),
endsnippet

snippet meck_expect
meck:expect($1, $2, [{[$3], $4}]),
endsnippet

snippet meck_wait
meck:wait($1, $2, $3, $4)
endsnippet

snippet cowboy_router "Cowboy Routes"
-module(${1:`!p snip.rv = snip.basename or "module"`}).

-behaviour(gen_server).

%% API
-export([start_link/0]).

%% gen_server callbacks
-export([init/1,
         handle_call/3,
         handle_cast/2,
         handle_info/2,
         terminate/2]).

-define(DEFAULT_PORT, 8000).

-record(state, {}).

%%%===================================================================
%%% API
%%%===================================================================

-spec start_link() -> {ok, pid()} | ignore | {error, term()}.
start_link() ->
    gen_server:start_link({local, ?MODULE}, ?MODULE, [], []).

%%%===================================================================
%%% gen_server callbacks
%%%===================================================================

init([]) ->
    process_flag(trap_exit, true),
    Port = application:get_env(${1}, api_port, ?DEFAULT_PORT),
    Routes = [{"/route/", ${2}, []},
              {"/route/:id", [{id, nonempty}], snmp_simulator_devices_handler, []}],
    Dispatch = cowboy_router:compile([{'_', Routes}]),
    {ok, _} = cowboy:start_clear(?MODULE,
                                 [{port, Port}],
                                 #{env => #{dispatch => Dispatch}}
                                ),
    {ok, #state{}}.

handle_call(_Request, _From, State) ->
    {reply, ok, State}.

handle_cast(_Msg, State) ->
    {noreply, State}.

handle_info(_Info, State) ->
    {noreply, State}.

terminate(_Reason, _State) ->
    cowboy:stop_listener(?MODULE).

%%%===================================================================
%%% Internal functions
%%%===================================================================
endsnippet

snippet cowboy_rest "Cowboy REST Handler"
-module(${1:`!p snip.rv = snip.basename or "module"`}).

-include_lib("kernel/include/logger.hrl").

-behaviour(cowboy_rest).

%% API
-export([to_json/2,
         from_json/2]).

%% cowboy_rest callbacks
-export([init/2,
         delete_resource/2,
         allowed_methods/2,
         content_types_provided/2,
         content_types_accepted/2]).

-type state() :: term().
-type cowboy_return(Parameter) :: {Parameter, cowboy_req:req(), state()}.

%%====================================================================
%% Public API
%%====================================================================

-spec to_json(cowboy_req:req(), state()) -> cowboy_return(Response :: binary()).
to_json(Request, State) ->
    {<<>>, Request, State}.

-spec from_json(cowboy_req:req(), state()) -> cowboy_return(IsBadRequest :: boolean()).
from_json(Request, State) ->
    {false, Request, State}.

%%====================================================================
%% cowboy_rest callbacks
%%====================================================================

init(Request, State) ->
    {cowboy_rest, Request, State}.

allowed_methods(Request, State) ->
    {[<<"GET">>, <<"POST">>, <<"PUT">>, <<"DELETE">>], Request, State}.

content_types_provided(Request, State) ->
    {[{{<<"application">>, <<"json">>, '*'}, to_json}], Request, State}.

content_types_accepted(Request, State) ->
    {[{{<<"application">>, <<"json">>, '*'}, from_json}], Request, State}.

delete_resource(Request, State) ->
    {true, Request, State}.

%%====================================================================
%% Internal functions
%%====================================================================
endsnippet
