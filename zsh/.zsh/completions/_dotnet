#compdef dotnet

_build_verbosity_level() {
    _values 'LEVEL' \
        'q[quiet]' \
        'm[minimal]' \
        'n[normal]' \
        'd[detailed]' \
        'diag[diagnostic]'
}

_dotnet() {
    typeset -A opt_args
    local context state line
    local current_context="${curcontext}"

    _arguments -C \
        '(-h --help)'{-h,--help}'[show command line help]' \
        '(-d --diagnostics)'{-d,--diagnostics}'[enable diagnostics output]' \
        '--info[display .NET core information]' \
        '--list-runtimes[display the installed runtimes]' \
        '--list-sdks[display the installed SDKs]' \
        '--version[display the .NET core version in use]' \
        '1:dotnet commands:->commands' \
        '*:: :->command_arguments'

    case $state in
        commands)
            local commands
            commands=(
                'add:add a package or reference to a .NET project'
                'build:build a .NET project'
                'build-server:interact with servers started by a build'
                'clean:clean build outputs of a .NET project'
                'help:show command line help'
                'list:list project references of a .NET project'
                'migrate:migrate a project.json project to an MSBuild project'
                'msbuild:run Microsoft Build Engine (MSBuild) commands'
                'new:create a new .NET project or file'
                'nuget:provides additional NuGet commands'
                'pack:create a NuGet package'
                'publish:publish a .NET project for deployment'
                'remove:remove a package or reference from a .NET project'
                'restore:restore dependencies specified in a .NET project'
                'run:build and run a .NET project output'
                'sln:modify Visual Studio solution files'
                'store:store the specified assemblies in the runtime package store'
                'test:run unit tests using the test runner specified in a .NET project'
                'tool:install or manage tools that extend the .NET experience'
                'vstest:run Microsoft Test Engine (VSTest) commands'
            )
            _describe -t commands 'dotnet command' commands
            ;;

        command_arguments)
            case $words[1] in
                add)
                    _arguments -C \
                        '(-h --help)'{-h,--help}'[show command line help]' \
                        '1:add commands:->subcommands' \
                        '*:: :->subcommand_arguments'
                    case $state in
                        subcommands)
                            local subcommands=(
                                'package:add a NuGet package reference to the project'
                                'reference:add a project-to-project reference to the project'
                            )
                            _describe -t subcommands 'add subcommand' subcommands
                            ;;
                        subcommand_arguments)
                            case $words[1] in
                                package)
                                    _arguments -C \
                                        '(-h --help)'{-h,--help}'[show command line help]' \
                                        '(-v --version)'{-v,--version}'[the version of the package to add]:VERSION:()' \
                                        '(-f --framework)'{-f,--framework}'[add the reference only when targeting a specific framework]:FRAMEWORK:()' \
                                        '(-n --no-restore)'{-n,--no-restore}'[add the reference without performing restore preview and compatibility check]' \
                                        '(-s --source)'{-s,--source}'[the NuGet package source to use during the restore]:FILES:_files' \
                                        '--package-directory[The directory to restore packages to]:PACKAGE_DIRECTORY:_directories' \
                                        '--interactive[allows the command to stop and wait for user input or action (for example to complete authentication)]'
                                    ;;
                                reference)
                                    _arguments -C \
                                        '(-h --help)'{-h,--help}'[show command line help]' \
                                        '(-f --framework)'{-f,--framework}'[add the reference only when targeting a specific framework]:FRAMEWORK'
                                    ;;
                            esac
                    esac
                    ;;
                build)
                    _arguments -C \
                        '(-h --help)'{-h,--help}'[show command line help]' \
                        '(-o --output)'{-o,--output}'[the output directory to place built artifacts in]:DIRECTORIES:_directories' \
                        '(-f,--framework)'{-f,--framework}'[the target framework to build for. The target framework must also be specified in the project file]:FRAMEWORK:()' \
                        '(-c,--configuration)'{-c,--configuration}'[the configuration to use for building the project. The default for most projects is Debug]:CONFIGURATION:_files' \
                        '(-r,--runtime)'{-r,--runtime}'[the target runtime to build for]:RUNTIME:()' \
                        '--version-suffix[set the value of the $(VersionSuffix) property to use when building the project]:VERSION_SUFFIX:()' \
                        '--no-incremental[do not use incremental building]' \
                        '--no-dependencies[do not build project-to-project references and only build the specified project]' \
                        '--no-restore[do not restore the project before building]' \
                        '(-v --verbosity)'{-v,--verbosity}'[set the MSBuild verbosity level]:LEVEL:_build_verbosity_level' \
                        '--force[force all dependencies to be resolved even if the last restore was successful]'
                    ;;
                build-server)
                    _arguments -C \
                        '(-h --help)'{-h,--help}'[show command line help]' \
                        '1:build-server commands:->subcommands' \
                        '*:: :->subcommand_arguments'
                    case $state in
                        subcommands)
                            local subcommands=(
                                'shutdown:shuts down build servers that are started from dotnet'
                            )
                            _describe -t subcommands 'build-server subcommand' subcommands
                            ;;
                        subcommand_arguments)
                            case $words[1] in
                                shutdown)
                                    _arguments -C \
                                        '(-h --help)'{-h,--help}'[show command line help]' \
                                        '--msbuild[shut down the MSBuild build server]' \
                                        '--vbcscompiler[shut down the VB/C# compiler build server]' \
                                        '--razor[shut down the Razor build server]'
                                    ;;
                            esac
                    esac
                    ;;
                clean)
                    _arguments -C \
                        '(-h --help)'{-h,--help}'[show command line help]' \
                        '(-o --output)'{-o,--output}'[the directory containing the build artifacts to clean]:OUTPUT_DIRECTORY:_directories' \
                        '(-f --framework)'{-f,--framework}'[the target framework to clean for (the target framework must also be specified in the project file)]:FRAMEWORK:()' \
                        '(-r --runtime)'{-r,--runtime}'[the target runtime to clean for]:RUNTIME_IDENTIFIER:()' \
                        '(-c --configuration)'{-c,--configuration}'[the configuration to clean for]:CONFIGURATION:()' \
                        '(-v --verbosity)'{-v,--verbosity}'[set the MSBuild verbosity level]:LEVEL:_build_verbosity_level'
                    ;;
                help)
                    _arguments \
                        '(-h --help)'{-h,--help}'[show command line help]'
                    ;;
                list)
                    _arguments -C \
                        '(-h --help)'{-h,--help}'[show command line help]' \
                        '1:list commands:->subcommands' \
                        '*:: :->subcommand_arguments'
                    case $state in
                        subcommands)
                            local subcommands=(
                                'reference:list all project-to-project references of the project'
                            )
                            _describe -t subcommands 'list subcommand' subcommands
                            ;;
                        subcommand_arguments)
                            case $words[1] in
                                reference)
                                    _arguments -C \
                                        '(-h --help)'{-h,--help}'[show command line help]' \
                                    ;;
                            esac
                    esac
                    ;;
                migrate)
                    _arguments -C \
                        '(-h --help)'{-h,--help}'[show command line help]' \
                        '(-t --template-file)'{-t,--template-file}'[the base MSBuild template to use for the migrated project]:TEMPLATE:_files' \
                        '(-v --sdk-package-version)'{-v,--sdk-package-version}'[the version of the SDK package that will be referenced in the migrated project]:VERSION:()' \
                        '(-x --xproj-file)'{-x,--xproj-file}'[the path to the xproj file to use (required when there is more than one xproj in a project directory)]:XPROJ_PATH:_files' \
                        '(-s --skip-project-references)'{-s,--skip-project-references}'[skip migrating project references (by default, project references are migrated recursively)]' \
                        '(-r --report-file)'{-r,--report-file}'[output migration report to the given file in addition to the console]' \
                        '--format-report-file-json[output migration report file as json rather than user messages]' \
                        '--skip-backup[skip moving project.json, global.json, and *.xproj to a `backup` directory after successful migration]'
                    ;;
                msbuild)
                    _arguments -C \
                        '(-h --help)'{-h,--help}'[show command line help]' \
                    ;;
                new)
                    _arguments -C \
                        '(-h --help)'{-h,--help}'[displays help for this command]' \
                        '(-l --list)'{-l,--list}'[lists templates containing the specified name (if no name is specified, lists all templates)]:NAME:()' \
                        '(-n --name)'{-n,--name}'[the name for the output being created (if no name is specified, the name of the current directory is used)]:NAME:()' \
                        '(-o --output)'{-o,--output}'[location to place the generated output]:PATH:_directories' \
                        '(-i --install)'{-i,--install}'[installs a source or a template pack]:TARGET:()' \
                        '(-u --uninstall)'{-u,--uninstall}'[uninstalls a source or a template pack]:TARGET:()' \
                        '--nuget-source[specifies a NuGet source to use during install]:SOURCE:()' \
                        '--type[filters templates based on available types]:TYPE:(project item other)' \
                        '--force[forces content to be generated even if it would change existing files]' \
                        '(-lang --language)'{-lang,--language}'[filters templates based on language and specifies the language of the template to create]:LANGUAGE:()'
                    ;;
                nuget)
                    _arguments -C \
                        '(-h --help)'{-h,--help}'[show help information]' \
                        '--version[show version information]' \
                        '(-v --verbosity)'{-v,--verbosity}'[the verbosity of logging to use]:VERBOSITY:(Debug Verbose Information Minimal Warning Error)' \
                        '1:list commands:->subcommands' \
                        '*:: :->subcommand_arguments'
                    case $state in
                        subcommands)
                            local subcommands=(
                                'delete:deletes a package from the server'
                                'locals:clears or lists local NuGet resources such as http requests cache, packages folder, plugin operations cache or machine-wide global packages folder'
                                'push:pushes a package to the server and publishes it'
                            )
                            _describe -t subcommands 'list subcommand' subcommands
                            ;;
                        subcommand_arguments)
                            case $words[1] in
                                delete)
                                    _arguments -C \
                                        '(-h --help)'{-h,--help}'[show help information]' \
                                        '--force-english-output[forces the application to run using an invariant, English-based culture]' \
                                        '(-s --source)'{-s,--source}'[specifies the server URL]:URL:()' \
                                        '--non-interactive[do not prompt for user input or confirmations]' \
                                        '(-k --api-key)'{-k,--api-key}'[the API key for the server]:KEY:()' \
                                        '--no-service-endpoint[do not append "api/v2/packages" to the source URL]' \
                                        '--interactive[allow the command to block and require manual action for operations like authentication]'
                                    ;;
                                locals)
                                    _arguments -C \
                                        '(-h --help)'{-h,--help}'[show help information]' \
                                        '--force-english-output[forces the application to run using an invariant, English-based culture]' \
                                        '(-c --clear)'{-c,--clear}'[clear the selected local resources or cache location(s)]' \
                                        '(-l --list)'{-l,--list}'[list the selected local resources or cache location(s)]'
                                    ;;
                                push)
                                    _arguments -C \
                                        '(-h --help)'{-h,--help}'[show help information]' \
                                        '--force-english-output[forces the application to run using an invariant, English-based culture]' \
                                        '(-s --source)'{-s,--source}'[specifies the server URL]:URL:()' \
                                        '(-ss --symbol-source)'{-ss,--symbol-source}'[specifies the symbol server URL. If not specified, nuget.smbsrc.net is used when pushing to nuget.org]:URL:()' \
                                        '(-t --timeout)'{-t,--timeout}'[specifies the timeout for pushing to a server in seconds]:TIMEOUT:()' \
                                        '(-k --api-key)'{-k,--api-key}'[the API key for the server]:KEY:()' \
                                        '(-sk --symbol-api-key)'{-sk,--symbol-api-key}'[the API key for the symbol server]:KEY:()' \
                                        '(-d --disable-buffering)'{-d,--disable-buffering}'[disable buffering when pushing to an HTTP(S) server to decrease memory usage]' \
                                        '(-n --no-symbols)'{-n,--no-symbols}'[if a symbols package exists, it will not be pushed to a symbols server]' \
                                        '--no-service-endpoint[do not append "api/v2/packages" to the source URL]' \
                                        '--interactive[allow the command to block and require manual action for operations like authentication]'
                                    ;;
                            esac
                    esac
                    ;;
                pack)
                    _arguments -C \
                        '(-h --help)'{-h,--help}'[show command line help]' \
                        '(-o --output)'{-o,--output}'[the output directory to place built packages in]' \
                        '--no-build[do not build the project before packing]' \
                        '--include-symbols[include packages with symbols in addition to regular packages in output directory]' \
                        '--include-source[include PDBs and source files]' \
                        '(-c --configuration)'{-c,--configuration}'[the configuration to use for building the package]:CONFIGURATION:()' \
                        '--version-suffix[set the value of the $(VersionSuffix) property to use when building the project]:SUFFIX:()' \
                        '(-s --serviceable)'{-s,--serviceable}'[set the serviceable flag in the package]' \
                        '--no-restore[do not restore the project before building]' \
                        '(-v --verbosity)'{-v,--verbosity}'[set the MSBuild verbosity level]:LEVEL:_build_verbosity_level' \
                        '--runtime[the target runtime to restore packages for]:RUNTIME_IDENTIFIER:()' \
                        '--no-dependencies[do not restore project-to-project references and only restore the specified project]' \
                        '--force[force all dependencies to be resolved even if the last restore was successful]'
                    ;;
                publish)
                    _arguments -C \
                        '(-h --help)'{-h,--help}'[show command line help]' \
                        '(-o --output)'{-o,--output}'[the output directory to place the published artifacts in]:DIRECTORY:_directories' \
                        '(-f --framework)'{-f,--framework}'[the target framework to publish for The target framework has to be specified in the project file]:FRAMEWORK:()' \
                        '(-r --runtime)'{-r,--runtime}'[the target runtime to publish for]:RUNTIME_IDENTIFIER:()' \
                        '(-c --configuration)'{-c,--configuration}'[the configuration to publish for]:CONFIGURATION:()' \
                        '--version-suffix[set the value of the $(VersionSuffix) property to use when building the project]:VERSION_SUFFIX:()' \
                        '--manifest[the path to a target manifest file that contains the list of packages to be excluded from the publish step]:MANIFEST:_files' \
                        '--no-build[do not build the project before publishing]' \
                        '--self-contained[publish the .NET Core runtime with your application so the runtime does not need to be installed on the target machine]' \
                        '--no-restore[do not restore the project before building]' \
                        '(-v --verbosity)'{-v,--verbosity}'[set the MSBuild verbosity level]:LEVEL:_build_verbosity_level' \
                        '--no-dependencies[do not restore project-to-project references and only restore the specified project]' \
                        '--force[force all dependencies to be resolved even if the last restore was successful]'
                    ;;
                remove)
                    _arguments -C \
                        '(-h --help)'{-h,--help}'[show command line help]' \
                        '1:list commands:->subcommands' \
                        '*:: :->subcommand_arguments'
                    case $state in
                        subcommands)
                            local subcommands=(
                                'package:remove a NuGet package reference from the project'
                                'reference:remove a project-to-project reference from the project'
                            )
                            _describe -t subcommands 'list subcommand' subcommands
                            ;;
                        subcommand_arguments)
                            case $words[1] in
                                package)
                                    _arguments -C \
                                        '(-h --help)'{-h,--help}'[show command line help]' \
                                    ;;
                                reference)
                                    _arguments -C \
                                        '(-h --help)'{-h,--help}'[show command line help]' \
                                        '(-f --framework)'{-f,--framework}'[remove the reference only when targeting a specific framework]:FRAMEWORK:()'
                                    ;;
                            esac
                    esac
                    ;;
                restore)
                    _arguments -C \
                        '(-h --help)'{-h,--help}'[show command line help]' \
                        '(-s --source)'{-s,--source}'[the NuGet package source to use for the restore]:SOURCE:()' \
                        '(-r --runtime)'{-r,--runtime}'[The target runtime to restore packages for.]:RUNTIME_IDENTIFIER:()' \
                        '--packages[the directory to restore packages to]:DIRECTORY:_directories' \
                        '--disable-parallel[prevent restoring multiple projects in parallel]' \
                        '--configfile[the NuGet configuration file to use]:FILE:_files' \
                        '--no-cache[do not cache packages and http requests]' \
                        '--ignore-failed-sources[treat package source failures as warnings]' \
                        '--no-dependencies[do not restore project-to-project references and only restore the specified project]' \
                        '(-f --force)'{-f,--force}'[force all dependencies to be resolved even if the last restore was successful]' \
                        '(-v --verbosity)'{-v,--verbosity}'[set the MSBuild verbosity level]:LEVEL:_build_verbosity_level' \
                        '--interactive[allows the command to stop and wait for user input or action (for example to complete authentication)]' \
                        '--use-lock-file[enables project lock file to be generated and used with restore]' \
                        '--locked-mode[do not allow updating project lock file]' \
                        '--lock-file-path[output location where project lock file is written]:LOCK_FILE_PATH:_files' \
                        '--force-evaluate[forces restore to reevaluate all dependencies even if a lock file already exists]'
                    ;;
                run)
                    _arguments -C \
                        '(-h --help)'{-h,--help}'[show command line help]' \
                        '(-c --configuration)'{-c,--configuration}'[the configuration to run for]:CONFIGURATION:_files' \
                        '(-f --framework)'{-f,--framework}'[the target framework to run for]:FRAMEWORK:()' \
                        '(-p --project)'{-p,--project}'[the path to the project file to run (defaults to the current directory if there is only one project)]:PATH:_files' \
                        '--launch-profile[the name of the launch profile (if any) to use when launching the application]:NAME:()' \
                        '--no-launch-profile[do not attempt to use launchSettings.json to configure the application]' \
                        '--no-build[do not build the project before running]' \
                        '--no-restore[do not restore the project before building]' \
                        '(-v --verbosity)'{-v,--verbosity}'[set the MSBuild verbosity level]:LEVEL:_build_verbosity_level' \
                        '--runtime[the target runtime to restore packages for]:RUNTIME_IDENTIFIER:()' \
                        '--no-dependencies[do not restore project-to-project references and only restore the specified project]' \
                        '--force[force all dependencies to be resolved even if the last restore was successful]'
                    ;;
                sln)
                    _arguments -C \
                        '(-h --help)'{-h,--help}'[show command line help]' \
                        '1:list commands:->subcommands' \
                        '*:: :->subcommand_arguments'
                    case $state in
                        subcommands)
                            local subcommands=(
                                'add:add one or more projects to a solution file'
                                'list:list all projects in a solution file'
                                'remove:remove one or more projects from a solution file'
                            )
                            _describe -t subcommands 'list subcommand' subcommands
                            ;;
                        subcommand_arguments)
                            case $words[1] in
                                add)
                                    _arguments -C \
                                        '(-h --help)'{-h,--help}'[show command line help]' \
                                    ;;
                                list)
                                    _arguments -C \
                                        '(-h --help)'{-h,--help}'[show command line help]' \
                                    ;;
                                remove)
                                    _arguments -C \
                                        '(-h --help)'{-h,--help}'[show command line help]' \
                                    ;;
                            esac
                    esac
                    ;;
                store)
                    _arguments -C \
                        '(-h --help)'{-h,--help}'[show command line help]' \
                        '(-m --manifest)'{-m,--manifest}'[the XML file that contains the list of packages to be stored]:PROJECT_MANIFEST:_files' \
                        '(-f --framework)'{-f,--framework}'[the target framework to store packages for]:FRAMEWORK:()' \
                        '--framework-version[the Microsoft.NETCore.App package version that will be used to run the assemblies]:FRAMEWORK_VERSION:()' \
                        '(-r --runtime)'{-r,--runtime}'[the target runtime to store packages for]:RUNTIME_IDENTIFIER:()' \
                        '(-o --output)'{-o,--output}'[the output directory to store the given assemblies in]:OUTPUT_DIR:_directories' \
                        '(-w --working-dir)'{-w,--working-dir}'[the working directory used by the command to execute]:WORKING_DIR:_directories' \
                        '--skip-optimization[skip the optimization phase]' \
                        '--skip-symbols[skip creating symbol files which can be used for profiling the optimized assemblies]' \
                        '(-v --verbosity)'{-v,--verbosity}'[set the MSBuild verbosity level]:LEVEL:_build_verbosity_level'
                    ;;
                test)
                    _arguments -C \
                        '(-h --help)'{-h,--help}'[show command line help]' \
                        '(-s --settings)'{-s,--settings}'[the settings file to use when running tests]:SETTINGS_FILE:_files' \
                        '(-t --list-tests)'{-t,--list-tests}'[list the discovered tests instead of running the tests]' \
                        '--filter[run tests that match the given expression]:EXPRESSION:()' \
                        '(-a --test-adapter-path)'{-a,--test-adapter-path}'[the path to the custom adapters to use for the test run]:ADAPTER_PATH:_directories' \
                        '(-l --logger)'{-l,--logger}'[the logger to use for test results]:LOGGER:()' \
                        '(-c --configuration)'{-c,--configuration}'[the configuration to use for running tests]:CONFIGURATION:_files' \
                        '(-f --framework)'{-f,--framework}'[the target framework to run tests for]:FRAMEWORK:()' \
                        '(-o --output)'{-o,--output}'[the output directory to place built artifacts in]:OUTPUT_DIR:_directories' \
                        '(-d --diag)'{-d,--diag}'[enable verbose logging to the specified file]:LOG_FILE:_files' \
                        '--no-build[do not build the project before testing. Implies --no-restore]' \
                        '(-r --results-directory)'{-r,--results-directory}'[the directory where the test results will be placed]:RESULTS_DIR:_directories' \
                        '--collect[the friendly name of the data collector to use for the test run]:DATA_COLLECTOR_NAME:()' \
                        '--blame[run the tests in blame mode]' \
                        '--no-restore[do not restore the project before building]' \
                        '(-v --verbosity)'{-v,--verbosity}'[set the MSBuild verbosity level]:LEVEL:_build_verbosity_level'
                    ;;
                tool)
                    _arguments -C \
                        '(-h --help)'{-h,--help}'[show command line help]' \
                        '1:list commands:->subcommands' \
                        '*:: :->subcommand_arguments'
                    case $state in
                        subcommands)
                            local subcommands=(
                                'install:install a tool for use on the command line'
                                'uninstall:uninstall a tool from the current development environment'
                                'update:update a tool to the latest stable version'
                                'list:list tools installed in the current development environment'
                            )
                            _describe -t subcommands 'list subcommand' subcommands
                            ;;
                        subcommand_arguments)
                            case $words[1] in
                                add)
                                    _arguments -C \
                                        '(-h --help)'{-h,--help}'[show command line help]' \
                                    ;;
                                install)
                                    _arguments -C \
                                        '(-h --help)'{-h,--help}'[show command line help]' \
                                        '(-g --global)'{-g,--global}'[install the tool to the current user tools directory]' \
                                        '--tool-path[the directory where the tool will be installed]:PATH:_directories' \
                                        '--version[the version of the tool package to install]:VERSION:()' \
                                        '--configfile[the NuGet configuration file to use]:FILE:_files' \
                                        '--add-source[Add an additional NuGet package source to use during installation]:SOURCE:()' \
                                        '--framework[the target framework to install the tool for]:FRAMEWORK:()' \
                                        '(-v --verbosity)'{-v,--verbosity}'[set the MSBuild verbosity level]:LEVEL:_build_verbosity_level'
                                    ;;
                                list)
                                    _arguments -C \
                                        '(-h --help)'{-h,--help}'[show command line help]' \
                                        '(-g --global)'{-g,--global}'[list tools in the current user tools directory]' \
                                        '--tool-path[the directory containing the tools to list]:PATH:_directories' \
                                    ;;
                                uninstall)
                                    _arguments -C \
                                        '(-h --help)'{-h,--help}'[show command line help]' \
                                        '(-g --global)'{-g,--global}'[uninstall the tool from the current user tools directory]' \
                                        '--tool-path[the directory containing the tool to uninstall]:PATH:_directories' \
                                    ;;
                                update)
                                    _arguments -C \
                                        '(-h --help)'{-h,--help}'[show command line help]' \
                                        '(-g --global)'{-g,--global}'[update the tool in the current user tools directory]' \
                                        '--tool-path[the directory containing the tool to update]:PATH:_directories' \
                                        '--configfile[the NuGet configuration file to use]:FILE:_files' \
                                        '--add-source[add an additional NuGet package source to use during the update]:SOURCE:()' \
                                        '--framework[the target framework to update the tool for]:FRAMEWORK:()' \
                                        '(-v --verbosity)'{-v,--verbosity}'[set the MSBuild verbosity level]:LEVEL:_build_verbosity_level'
                                    ;;
                            esac
                    esac
                    ;;
                vstest)
                    _arguments -C \
                        '(-h --help)'{-h,--help}'[show command line help]' \
                        '--Tests[run tests with names that match the provided values]:TEST_NAMES:()' \
                        '--TestCaseFilter[run tests that match the given expression]:EXPRESSION:()' \
                        '--Framework[target .Net Framework version to be used for test execution]:FRAMEWORK_VERSION:()' \
                        '--Platform[target platform architecture to be used for test execution]:PLATFORM_TYPE:(x86 x64 ARM)' \
                        '--Settings[settings to use when running tests]:SETTINGS_FILE:_files' \
                        '(-lt --ListTests)'{-lt,--ListTests}'[lists all discovered tests from the given test container]:FILE_NAME:_files' \
                        '--Parallel[specifies that the tests be executed in parallel]' \
                        '--TestAdapterPath[this makes vstest.console.exe process use custom test adapters from a given path (if any) in the test run]:PATH:_directories' \
                        '--Blame[runs the test in blame mode]:ARGUMENTS:()' \
                        '--Diag[enable logs for test platform]:LOG_FILE_PATH:_files' \
                        '--logger[specify a logger for test results]:LOGGER:()' \
                        '--ResultsDirectory[test results directory will be created in specified path if not exists]:DIRECTORY:_directories' \
                        '--ParentProcessId[process Id of the Parent Process responsible for launching current process]:PARENT_PROCESS_ID:()' \
                        '--Port[the port for socket connection and receiving the event messages]:PORT:()' \
                        '--Collect[enable data collector for the test run]:DATA_COLLECTOR:()' \
                        '--InIsolation[runs the tests in an isolated process]' \
                    ;;
            esac
            ;;
    esac
}

_dotnet "${@}"
