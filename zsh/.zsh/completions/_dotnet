#compdef dotnet

_build_verbosity_level() {
    _values 'LEVEL' \
        'q[quiet]' \
        'm[minimal]' \
        'n[normal]' \
        'd[detailed]' \
        'diag[diagnostic]'
}

_dotnet() {
    typeset -A opt_args
    local context state line
    local current_context="${curcontext}"

    _arguments -C \
        '(-h --help)'{-h,--help}'[show command line help]' \
        '(-d --diagnostics)'{-d,--diagnostics}'[enable diagnostics output]' \
        '--info[display .NET core information]' \
        '--list-runtimes[display the installed runtimes]' \
        '--list-sdks[display the installed SDKs]' \
        '--version[display the .NET core version in use]' \
        '1:dotnet commands:->commands' \
        '*:: :->command_arguments'

    case $state in
        commands)
            local commands
            commands=(
                'add:add a package or reference to a .NET project'
                'build:build a .NET project'
                'build-server:interact with servers started by a build'
                'clean:clean build outputs of a .NET project'
                'help:show command line help'
                'list:list project references of a .NET project'
                'migrate:migrate a project.json project to an MSBuild project'
                'msbuild:run Microsoft Build Engine (MSBuild) commands'
                'new:create a new .NET project or file'
                'nuget:provides additional NuGet commands'
                'pack:create a NuGet package'
                'publish:publish a .NET project for deployment'
                'remove:remove a package or reference from a .NET project'
                'restore:restore dependencies specified in a .NET project'
                'run:build and run a .NET project output'
                'sln:modify Visual Studio solution files'
                'store:store the specified assemblies in the runtime package store'
                'test:run unit tests using the test runner specified in a .NET project'
                'tool:install or manage tools that extend the .NET experience'
                'vstest:run Microsoft Test Engine (VSTest) commands'
            )
            _describe -t commands 'dotnet command' commands
            ;;

        command_arguments)
            case $words[1] in
                add)
                    _arguments -C \
                        '(-h --help)'{-h,--help}'[show command line help]' \
                        '1:add commands:->subcommands' \
                        '*:: :->subcommand_arguments'
                    case $state in
                        subcommands)
                            local subcommands=(
                                'package:add a NuGet package reference to the project'
                                'reference:add a project-to-project reference to the project'
                            )
                            _describe -t subcommands 'add subcommand' subcommands
                            ;;
                        subcommand_arguments)
                            case $words[1] in
                                package)
                                    _arguments -C \
                                        '(-h --help)'{-h,--help}'[show command line help]' \
                                        '(-v --version)'{-v,--version}'[the version of the package to add]:VERSION:()' \
                                        '(-f --framework)'{-f,--framework}'[add the reference only when targeting a specific framework]:FRAMEWORK:()' \
                                        '(-n --no-restore)'{-n,--no-restore}'[add the reference without performing restore preview and compatibility check]' \
                                        '(-s --source)'{-s,--source}'[the NuGet package source to use during the restore]:FILES:_files' \
                                        '--package-directory[The directory to restore packages to]:PACKAGE_DIRECTORY:_directories' \
                                        '--interactive[allows the command to stop and wait for user input or action (for example to complete authentication)]'
                                    ;;
                                reference)
                                    _arguments -C \
                                        '(-h --help)'{-h,--help}'[show command line help]' \
                                        '(-f --framework)'{-f,--framework}'[add the reference only when targeting a specific framework]:FRAMEWORK'
                                    ;;
                            esac
                    esac
                    ;;
                build)
                    _arguments -C \
                        '(-h --help)'{-h,--help}'[show command line help]' \
                        '(-o --output)'{-o,--output}'[the output directory to place built artifacts in]:DIRECTORIES:_directories' \
                        '(-f,--framework)'{-f,--framework}'[the target framework to build for. The target framework must also be specified in the project file]:FRAMEWORK:()' \
                        '(-c,--configuration)'{-c,--configuration}'[the configuration to use for building the project. The default for most projects is Debug]:CONFIGURATION:_files' \
                        '(-r,--runtime)'{-r,--runtime}'[the target runtime to build for]:RUNTIME:()' \
                        '--version-suffix[set the value of the $(VersionSuffix) property to use when building the project]:VERSION_SUFFIX:()' \
                        '--no-incremental[do not use incremental building]' \
                        '--no-dependencies[do not build project-to-project references and only build the specified project]' \
                        '--no-restore[do not restore the project before building]' \
                        '(-v --verbosity)'{-v,--verbosity}'[set the MSBuild verbosity level]:LEVEL:_build_verbosity_level' \
                        '--force[force all dependencies to be resolved even if the last restore was successful]'
                    ;;
                build-server)
                    _arguments -C \
                        '(-h --help)'{-h,--help}'[show command line help]' \
                        '1:build-server commands:->subcommands' \
                        '*:: :->subcommand_arguments'
                    case $state in
                        subcommands)
                            local subcommands=(
                                'shutdown:shuts down build servers that are started from dotnet'
                            )
                            _describe -t subcommands 'build-server subcommand' subcommands
                            ;;
                        subcommand_arguments)
                            case $words[1] in
                                shutdown)
                                    _arguments -C \
                                        '(-h --help)'{-h,--help}'[show command line help]' \
                                        '--msbuild[shut down the MSBuild build server]' \
                                        '--vbcscompiler[shut down the VB/C# compiler build server]' \
                                        '--razor[shut down the Razor build server]'
                                    ;;
                            esac
                    esac
                    ;;
                clean)
                    _arguments -C \
                        '(-h --help)'{-h,--help}'[show command line help]' \
                        '(-o --output)'{-o,--output}'[the directory containing the build artifacts to clean]:OUTPUT_DIRECTORY:_directories' \
                        '(-f --framework)'{-f,--framework}'[the target framework to clean for (the target framework must also be specified in the project file)]:FRAMEWORK:()' \
                        '(-r --runtime)'{-r,--runtime}'[the target runtime to clean for]:RUNTIME_IDENTIFIER:()' \
                        '(-c --configuration)'{-c,--configuration}'[the configuration to clean for]:CONFIGURATION:()' \
                        '(-v --verbosity)'{-v,--verbosity}'[set the MSBuild verbosity level]:LEVEL:_build_verbosity_level'
                    ;;
                help)
                    _arguments \
                        '(-h --help)'{-h,--help}'[show command line help]'
                    ;;
                list)
                    _arguments -C \
                        '(-h --help)'{-h,--help}'[show command line help]' \
                        '1:list commands:->subcommands' \
                        '*:: :->subcommand_arguments'
                    case $state in
                        subcommands)
                            local subcommands=(
                                'reference:list all project-to-project references of the project'
                            )
                            _describe -t subcommands 'list subcommand' subcommands
                            ;;
                        subcommand_arguments)
                            case $words[1] in
                                reference)
                                    _arguments -C \
                                        '(-h --help)'{-h,--help}'[show command line help]' \
                                    ;;
                            esac
                    esac
                    ;;
                migrate)
                    _arguments -C \
                        '(-h --help)'{-h,--help}'[show command line help]' \
                        '(-t --template-file)'{-t,--template-file}'[the base MSBuild template to use for the migrated project]:TEMPLATE:_files' \
                        '(-v --sdk-package-version)'{-v,--sdk-package-version}'[the version of the SDK package that will be referenced in the migrated project]:VERSION:()' \
                        '(-x --xproj-file)'{-x,--xproj-file}'[the path to the xproj file to use (required when there is more than one xproj in a project directory)]:XPROJ_PATH:_files' \
                        '(-s --skip-project-references)'{-s,--skip-project-references}'[skip migrating project references (by default, project references are migrated recursively)]' \
                        '(-r --report-file)'{-r,--report-file}'[output migration report to the given file in addition to the console]' \
                        '--format-report-file-json[output migration report file as json rather than user messages]' \
                        '--skip-backup[skip moving project.json, global.json, and *.xproj to a `backup` directory after successful migration]'
                    ;;
                msbuild)
                    _arguments -C \
                        '(-h --help)'{-h,--help}'[show command line help]' \
                    ;;
                new)
                    _arguments -C \
                        '(-h --help)'{-h,--help}'[displays help for this command]' \
                        '(-l --list)'{-l,--list}'[lists templates containing the specified name (if no name is specified, lists all templates)]:NAME:()' \
                        '(-n --name)'{-n,--name}'[the name for the output being created (if no name is specified, the name of the current directory is used)]:NAME:()' \
                        '(-o --output)'{-o,--output}'[location to place the generated output]:PATH:_directories' \
                        '(-i --install)'{-i,--install}'[installs a source or a template pack]:TARGET:()' \
                        '(-u --uninstall)'{-u,--uninstall}'[uninstalls a source or a template pack]:TARGET:()' \
                        '--nuget-source[specifies a NuGet source to use during install]:SOURCE:()' \
                        '--type[filters templates based on available types]:TYPE:(project item other)' \
                        '--force[forces content to be generated even if it would change existing files]' \
                        '(-lang --language)'{-lang,--language}'[filters templates based on language and specifies the language of the template to create]:LANGUAGE:()'
                    ;;
                nuget)
                    ;;
                pack)
                    ;;
                publish)
                    ;;
                remove)
                    ;;
                restore)
                    ;;
                run)
                    ;;
                sln)
                    ;;
                store)
                    ;;
                test)
                    ;;
                tool)
                    ;;
                vstest)
                    ;;
            esac
            ;;
    esac
}

_dotnet "${@}"
